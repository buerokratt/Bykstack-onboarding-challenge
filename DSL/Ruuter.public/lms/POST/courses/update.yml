declare:
  call: declare
  version: 0.1
  description: "Update a course's information"
  method: post
  accepts: json
  returns: json
  namespace: lms
  allowlist:
    body:
      - field: courseCode
        type: string
        description: "Course code (required for identifying the course)"
      - field: courseName
        type: string
        description: "Course name"
        optional: true
      - field: description
        type: string
        description: "Course description"
        optional: true
      - field: credits
        type: int
        description: "Course credits"
        optional: true
      - field: instructorId
        type: int
        description: "ID of the instructor teaching the course"
        optional: true
      - field: schedule
        type: json
        description: "Course schedule in JSON format"
        optional: true

extract_request_data:
  assign:
    course_code: ${incoming.body.courseCode}
    course_name: ${incoming.body.courseName || null}
    description: ${incoming.body.description || null}
    credits: ${incoming.body.credits || null}
    instructor_id: ${incoming.body.instructorId || null}
    schedule: ${incoming.body.schedule || null}
  next: validate_course_code

validate_course_code:
  switch:
    - condition: ${course_code !== null && course_code !== undefined && course_code !== ''}
      next: log_before_check
  next: return_incorrect_request

log_before_check:
  log: "Checking if course with code ${course_code} exists before updating"
  next: check_course_exists

check_course_exists:
  call: http.post
  args:
    url: "[#LMS_RESQL]/get-course"
    body:
      courseCode: ${course_code}
  result: res_check
  next: check_course_found

check_course_found:
  switch:
    - condition: ${res_check.response.body && res_check.response.body.length > 0}
      next: log_before_update
  next: return_not_exists

log_before_update:
  log: "About to update course with code: ${course_code}"
  next: update_course

update_course:
  call: http.post
  args:
    url: "[#LMS_RESQL]/update-course"
    body:
      courseCode: ${course_code}
      courseName: ${course_name}
      description: ${description}
      credits: ${credits}
      instructorId: ${instructor_id}
      schedule: "${schedule != null ? JSON.stringify(schedule) : null}"
  result: res_update
  next: check_update_status

check_update_status:
  switch:
    - condition: ${200 <= res_update.response.statusCodeValue && res_update.response.statusCodeValue < 300}
      next: assign_success_response
  next: assign_fail_response

assign_success_response:
  assign:
    course_data: ${res_update.response.body[0]}
    format_res:
      courseId: ${course_data.id}
      courseCode: ${course_data.courseCode}
      operationSuccessful: true
      message: "Course successfully updated"
  next: return_ok

assign_fail_response:
  assign:
    format_res:
      courseCode: ${course_code}
      operationSuccessful: false
      message: "Failed to update course"
  next: return_bad_request

return_ok:
  status: 200
  return: ${format_res}
  next: end

return_incorrect_request:
  status: 400
  return: "Missing required courseCode parameter"
  next: end

return_not_exists:
  status: 404
  return: "Error: Course with code ${course_code} does not exist"
  next: end

return_bad_request:
  status: 400
  return: ${format_res}
  next: end