declaration:
  call: declare
  version: 0.1
  description: "Decription placeholder for 'EDIT'"
  method: post
  accepts: json
  returns: json
  namespace: onboarding
  allowlist:
    body:
      - field: firstName
        type?: string
      - field: lastName
        type?: string
      - field: email
        type?: string
      - field: enrollmentDate
        type?: string
      - field: phone
        type?: string
      - field: dateOfBirth
        type?: string
      - field: gender
        type?: string
      - field: status
        type?: string

extractRequestData:
  assign:
    firstName: ${incoming.body.firstName}
    lastName: ${incoming.body.lastName}
    email: ${incoming.body.email}
    enrollmentDate: ${incoming.body.enrollmentDate}
    phone: ${incoming.body.phone}
    dateOfBirth: ${incoming.body.dateOfBirth}
    gender: ${incoming.body.gender}
    status: ${incoming.body.status}
 
getUser:
  call: http.post
  args:
    url: "[#LMS_RESQL]/get-students"
    body:
      email: ${email}
  result: res
  next: checkIfStudentExists

checkIfStudentExists:
  switch:
    - condition: "${res.response.body.length > 0}"
      next: updateStudent
  next: return_not_exists

updateStudent:
  call: http.post
  args:
    url: "[#LMS_RESQL]/update-student"
    body:
      firstName: ${firstName}
      lastName: ${lastName}
      email: ${email}
      phone: ${phone}
      dateOfBirth: ${dateOfBirth} # YYYY-MM-DD format
      gender: ${gender}
      enrollmentDate: ${enrollmentDate} # YYYY-MM-DD format
      status: ${status}
      updatedAt: ${new Date().toISOString()}
  result: update_user_res
  next: return_result

return_result:
  return: "Student updated successfully"
  status: 200
  next: end

return_not_exists:
  return: "error: Student does not exist"
  status: 400
  next: end